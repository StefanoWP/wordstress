#!/usr/bin/env ruby

require 'getoptlong'
require 'json'
require 'codesake-commons'

require 'wordstress'

# Scanning modes for plugins and themes
#   + gentleman: wordstress will try to fetch plugins and themes only using
#     info in the HTML page (this is very polite but also very inaccurate).
#   + interactive: wordstress will use a target installed plugin to fetch
#     installed plugins and themes with their version
#   + aggressive: wordstress will use enumeration to find installed plugins and
#     themes. This will lead to false positives.
MODES = [:gentleman,:interactive,:aggressive]
APPNAME = File.basename($0)

$logger  = Codesake::Commons::Logging.instance
@output_root = File.join(Dir.home, '/wordstress')
scanning_mode = :gentleman

opts    = GetoptLong.new(
  [ '--gentleman','-G',   GetoptLong::NO_ARGUMENT],
  [ '--csv',      '-C',   GetoptLong::NO_ARGUMENT],
  [ '--version',  '-v',   GetoptLong::NO_ARGUMENT],
  [ '--help',     '-h',   GetoptLong::NO_ARGUMENT]
)

opts.quiet=true

begin
  opts.each do |opt, val|
    case opt
    when '--version'
      puts "#{Wordstress::VERSION}"
      Kernel.exit(0)
    when '--help'
      Kernel.exit(0)
    end
  end
rescue GetoptLong::InvalidOption => e
  $logger.helo APPNAME, Wordstress::VERSION
  $logger.err e.message
  Kernel.exit(-1)
end

target=ARGV.shift
$logger.helo APPNAME, Wordstress::VERSION
$logger.toggle_syslog
@output_dir = File.join(@output_root, Wordstress::Utils.target_to_dirname(target))

unless Dir.exists?(@output_root)
  $logger.ok "creating output dir #{@output_root}"
  Dir.mkdir @output_root
end

unless Dir.exists?(@output_dir)
  $logger.ok "storing results to #{@output_dir}"
end

trap("INT")   { $logger.die('[INTERRUPTED]') }
$logger.die("missing target") if target.nil?

$logger.log "scanning #{target}"
site = Wordstress::Site.new({:target=>target, :scanning_mode=>scanning_mode})

if site.version[:version] == "0.0.0"
  $logger.err "can't detect wordpress version running on #{target}. Giving up!"
  Kernel.exit(-2)
end

$logger.ok "wordpress version #{site.version[:version]} detected"

if site.online?
  wp_vuln_hash = JSON.parse(site.wp_vuln_json)
  $logger.ok "#{wp_vuln_hash["wordpress"]["vulnerabilities"].size} vulnerabilities found due wordpress version"
  wp_vuln_hash["wordpress"]["vulnerabilities"].each do |v|
    $logger.log "#{v["id"]} - #{v["title"]}"
  end
else
  $logger.err "it seems we are offline. wordstress can't reach https://wpvulndb.com"
  $logger.err "wordpress can't enumerate vulnerabilities"
end
$logger.debug site.plugins
